---
import Layout from "../../layouts/Layout.astro"
import { CardPlayButton } from "@/components/CardPlayButton"
import { allPlaylists, songs } from "@/lib/data"
import { MusicsTable } from "@/components/MusicsTable"
import LikeButton from "@/components/LikeButton.astro"
import DotsButton from "@/components/DotsButton.astro"
import PageHeader from "@/components/PageHeader.astro"

const { id } = Astro.params

const playlist = allPlaylists.find((playlist) => playlist.id === id)
const playListSongs = songs.filter((song) => song.albumId === playlist?.albumId)

const durationInSeconds = (duration: string): number => {
  const parts = duration.split(":").map(Number)
  if (parts.length === 2) {
    // Si la duración solo tiene minutos y segundos
    return parts[0] * 60 + parts[1] // Convertir a segundos
  } else if (parts.length === 3) {
    // Si la duración incluye horas, minutos y segundos
    return parts[0] * 3600 + parts[1] * 60 + parts[2] // Convertir a segundos
  } else {
    return 0 // Duración inválida
  }
}

const formatDuration = (totalSeconds: number): string => {
  const hours = Math.floor(totalSeconds / 3600)
  const minutes = Math.floor((totalSeconds % 3600) / 60)

  if (hours > 0) {
    return `${hours} h`
  } else {
    return `${minutes} min`
  }
}

// Calcular la duración total en segundos y formatearla
const totalDurationInSeconds = playListSongs.reduce(
  (acc, song) => acc + durationInSeconds(song.duration),
  0,
)

const formattedDuration = formatDuration(totalDurationInSeconds)
---

<Layout title="Spotify Clone">
  <div
    id="playlist-container"
    class="relative rounded-lg flex flex-col h-full bg-[rgba(179,179,179,0.2)] overflow-x-hidden bg-gradient-to-t from-20% from-[rgb(12,12,12)] via-[rgba(12,12,12,0.5)]"
    style={`background-color: ${playlist?.color.accent}`}
    transition:name=`playlist ${id} box`
  >
    <PageHeader />

    <header class="flex flex-row gap-5 p-[24px]">
      <picture class="aspect-square w-[232px] h-[232px] flex-none ">
        <img
          src={playlist?.cover}
          alt={`Cover of ${playlist?.title}`}
          class="object-cover rounded-[2%] w-full h-full shadow-lg"
          transition:name=`playlist ${playlist?.id} image`
        />
      </picture>

      <div class="flex flex-col justify-between">
        <h2 class="flex flex-1 items-end text-sm font-thin px-[7px]">Playlist</h2>
        
          <h1 class="text-8xl font-[700] block text-white">
            <span transition:name=`playlist ${playlist?.id} title`>
              {playlist?.title}
            </span>
          </h1>
        

        <div class="flex-1 flex items-end align-baseline">
          <div class="text-sm text-gray-300">
            <div transition:name=`playlist ${playlist?.id} artists`>
              <span>{playlist?.artists.join(", ")}</span>
            </div>
            <div class="mt-1 gap-1 flex flex-row">
              <img
                aria-hidden="false"
                draggable="false"
                loading="eager"
                src="https://i.scdn.co/image/ab67757000003b8255c25988a6ac314394d3fbf5"
                alt="Spotify"
                class="rounded-full w-5 h-5"
              /> 
              <span class=" text-white font-[500]">Spotify</span>
              <span class=" text-white ">•</span>
              <span class="text-gray-100">{playListSongs.length} canciones</span>, cerca de
              {formattedDuration}
            </div>
          </div>
        </div>
      </div>
    </header>

    <div class="bg-[rgba(12,12,12,.2)]">
      <div class="flex flex-row pl-6 pt-6  items-center">
        <CardPlayButton client:load id={id} size="large"/>
        <div class="ml-6"></div>
        <LikeButton />
        <DotsButton />
      </div>
      

      <div class="relative z-10 px-6 pt-4"></div>

      <section class="relative px-4">
        <MusicsTable songs={playListSongs} client:load />
      </section>
    </div>
  </div>
</Layout>
